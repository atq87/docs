### YamlMime:ManagedReference
items:
- uid: Microsoft.Owin.Logging.LoggerExtensions
  commentId: T:Microsoft.Owin.Logging.LoggerExtensions
  id: LoggerExtensions
  parent: Microsoft.Owin.Logging
  children:
  - Microsoft.Owin.Logging.LoggerExtensions.IsEnabled(Microsoft.Owin.Logging.ILogger,System.Diagnostics.TraceEventType)
  - Microsoft.Owin.Logging.LoggerExtensions.WriteCritical(Microsoft.Owin.Logging.ILogger,System.String)
  - Microsoft.Owin.Logging.LoggerExtensions.WriteCritical(Microsoft.Owin.Logging.ILogger,System.String,System.Exception)
  - Microsoft.Owin.Logging.LoggerExtensions.WriteError(Microsoft.Owin.Logging.ILogger,System.String)
  - Microsoft.Owin.Logging.LoggerExtensions.WriteError(Microsoft.Owin.Logging.ILogger,System.String,System.Exception)
  - Microsoft.Owin.Logging.LoggerExtensions.WriteInformation(Microsoft.Owin.Logging.ILogger,System.String)
  - Microsoft.Owin.Logging.LoggerExtensions.WriteVerbose(Microsoft.Owin.Logging.ILogger,System.String)
  - Microsoft.Owin.Logging.LoggerExtensions.WriteWarning(Microsoft.Owin.Logging.ILogger,System.String,System.Exception)
  - Microsoft.Owin.Logging.LoggerExtensions.WriteWarning(Microsoft.Owin.Logging.ILogger,System.String,System.String[])
  langs:
  - csharp
  - vb
  name: LoggerExtensions
  nameWithType: LoggerExtensions
  fullName: Microsoft.Owin.Logging.LoggerExtensions
  type: Class
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Microsoft.Owin.Logging
  summary: "\nILogger extension methods for common scenarios.\n"
  syntax:
    content: public static class LoggerExtensions
    content.vb: Public Module LoggerExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Owin.Logging.LoggerExtensions.IsEnabled(Microsoft.Owin.Logging.ILogger,System.Diagnostics.TraceEventType)
  commentId: M:Microsoft.Owin.Logging.LoggerExtensions.IsEnabled(Microsoft.Owin.Logging.ILogger,System.Diagnostics.TraceEventType)
  id: IsEnabled(Microsoft.Owin.Logging.ILogger,System.Diagnostics.TraceEventType)
  isExtensionMethod: true
  parent: Microsoft.Owin.Logging.LoggerExtensions
  langs:
  - csharp
  - vb
  name: IsEnabled(ILogger, TraceEventType)
  nameWithType: LoggerExtensions.IsEnabled(ILogger, TraceEventType)
  fullName: Microsoft.Owin.Logging.LoggerExtensions.IsEnabled(Microsoft.Owin.Logging.ILogger, System.Diagnostics.TraceEventType)
  type: Method
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Microsoft.Owin.Logging
  summary: "\nChecks if the given TraceEventType is enabled.\n"
  syntax:
    content: public static bool IsEnabled(this ILogger logger, TraceEventType eventType)
    parameters:
    - id: logger
      type: Microsoft.Owin.Logging.ILogger
    - id: eventType
      type: System.Diagnostics.TraceEventType
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsEnabled(logger As ILogger, eventType As TraceEventType) As Boolean
  overload: Microsoft.Owin.Logging.LoggerExtensions.IsEnabled*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Owin.Logging.LoggerExtensions.WriteVerbose(Microsoft.Owin.Logging.ILogger,System.String)
  commentId: M:Microsoft.Owin.Logging.LoggerExtensions.WriteVerbose(Microsoft.Owin.Logging.ILogger,System.String)
  id: WriteVerbose(Microsoft.Owin.Logging.ILogger,System.String)
  isExtensionMethod: true
  parent: Microsoft.Owin.Logging.LoggerExtensions
  langs:
  - csharp
  - vb
  name: WriteVerbose(ILogger, String)
  nameWithType: LoggerExtensions.WriteVerbose(ILogger, String)
  fullName: Microsoft.Owin.Logging.LoggerExtensions.WriteVerbose(Microsoft.Owin.Logging.ILogger, System.String)
  type: Method
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Microsoft.Owin.Logging
  summary: "\nWrites a verbose log message.\n"
  syntax:
    content: public static void WriteVerbose(this ILogger logger, string data)
    parameters:
    - id: logger
      type: Microsoft.Owin.Logging.ILogger
    - id: data
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub WriteVerbose(logger As ILogger, data As String)
  overload: Microsoft.Owin.Logging.LoggerExtensions.WriteVerbose*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Owin.Logging.LoggerExtensions.WriteInformation(Microsoft.Owin.Logging.ILogger,System.String)
  commentId: M:Microsoft.Owin.Logging.LoggerExtensions.WriteInformation(Microsoft.Owin.Logging.ILogger,System.String)
  id: WriteInformation(Microsoft.Owin.Logging.ILogger,System.String)
  isExtensionMethod: true
  parent: Microsoft.Owin.Logging.LoggerExtensions
  langs:
  - csharp
  - vb
  name: WriteInformation(ILogger, String)
  nameWithType: LoggerExtensions.WriteInformation(ILogger, String)
  fullName: Microsoft.Owin.Logging.LoggerExtensions.WriteInformation(Microsoft.Owin.Logging.ILogger, System.String)
  type: Method
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Microsoft.Owin.Logging
  summary: "\nWrites an informational log message.\n"
  syntax:
    content: public static void WriteInformation(this ILogger logger, string message)
    parameters:
    - id: logger
      type: Microsoft.Owin.Logging.ILogger
    - id: message
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub WriteInformation(logger As ILogger, message As String)
  overload: Microsoft.Owin.Logging.LoggerExtensions.WriteInformation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Owin.Logging.LoggerExtensions.WriteWarning(Microsoft.Owin.Logging.ILogger,System.String,System.String[])
  commentId: M:Microsoft.Owin.Logging.LoggerExtensions.WriteWarning(Microsoft.Owin.Logging.ILogger,System.String,System.String[])
  id: WriteWarning(Microsoft.Owin.Logging.ILogger,System.String,System.String[])
  isExtensionMethod: true
  parent: Microsoft.Owin.Logging.LoggerExtensions
  langs:
  - csharp
  - vb
  name: WriteWarning(ILogger, String, String[])
  nameWithType: LoggerExtensions.WriteWarning(ILogger, String, String[])
  fullName: Microsoft.Owin.Logging.LoggerExtensions.WriteWarning(Microsoft.Owin.Logging.ILogger, System.String, System.String[])
  type: Method
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Microsoft.Owin.Logging
  summary: "\nWrites a warning log message.\n"
  syntax:
    content: public static void WriteWarning(this ILogger logger, string message, params string[] args)
    parameters:
    - id: logger
      type: Microsoft.Owin.Logging.ILogger
    - id: message
      type: System.String
    - id: args
      type: System.String[]
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub WriteWarning(logger As ILogger, message As String, ParamArray args As String())
  overload: Microsoft.Owin.Logging.LoggerExtensions.WriteWarning*
  nameWithType.vb: LoggerExtensions.WriteWarning(ILogger, String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Owin.Logging.LoggerExtensions.WriteWarning(Microsoft.Owin.Logging.ILogger, System.String, System.String())
  name.vb: WriteWarning(ILogger, String, String())
- uid: Microsoft.Owin.Logging.LoggerExtensions.WriteWarning(Microsoft.Owin.Logging.ILogger,System.String,System.Exception)
  commentId: M:Microsoft.Owin.Logging.LoggerExtensions.WriteWarning(Microsoft.Owin.Logging.ILogger,System.String,System.Exception)
  id: WriteWarning(Microsoft.Owin.Logging.ILogger,System.String,System.Exception)
  isExtensionMethod: true
  parent: Microsoft.Owin.Logging.LoggerExtensions
  langs:
  - csharp
  - vb
  name: WriteWarning(ILogger, String, Exception)
  nameWithType: LoggerExtensions.WriteWarning(ILogger, String, Exception)
  fullName: Microsoft.Owin.Logging.LoggerExtensions.WriteWarning(Microsoft.Owin.Logging.ILogger, System.String, System.Exception)
  type: Method
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Microsoft.Owin.Logging
  summary: "\nWrites a warning log message.\n"
  syntax:
    content: public static void WriteWarning(this ILogger logger, string message, Exception error)
    parameters:
    - id: logger
      type: Microsoft.Owin.Logging.ILogger
    - id: message
      type: System.String
    - id: error
      type: System.Exception
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub WriteWarning(logger As ILogger, message As String, error As Exception)
  overload: Microsoft.Owin.Logging.LoggerExtensions.WriteWarning*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Owin.Logging.LoggerExtensions.WriteError(Microsoft.Owin.Logging.ILogger,System.String)
  commentId: M:Microsoft.Owin.Logging.LoggerExtensions.WriteError(Microsoft.Owin.Logging.ILogger,System.String)
  id: WriteError(Microsoft.Owin.Logging.ILogger,System.String)
  isExtensionMethod: true
  parent: Microsoft.Owin.Logging.LoggerExtensions
  langs:
  - csharp
  - vb
  name: WriteError(ILogger, String)
  nameWithType: LoggerExtensions.WriteError(ILogger, String)
  fullName: Microsoft.Owin.Logging.LoggerExtensions.WriteError(Microsoft.Owin.Logging.ILogger, System.String)
  type: Method
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Microsoft.Owin.Logging
  summary: "\nWrites an error log message.\n"
  syntax:
    content: public static void WriteError(this ILogger logger, string message)
    parameters:
    - id: logger
      type: Microsoft.Owin.Logging.ILogger
    - id: message
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub WriteError(logger As ILogger, message As String)
  overload: Microsoft.Owin.Logging.LoggerExtensions.WriteError*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Owin.Logging.LoggerExtensions.WriteError(Microsoft.Owin.Logging.ILogger,System.String,System.Exception)
  commentId: M:Microsoft.Owin.Logging.LoggerExtensions.WriteError(Microsoft.Owin.Logging.ILogger,System.String,System.Exception)
  id: WriteError(Microsoft.Owin.Logging.ILogger,System.String,System.Exception)
  isExtensionMethod: true
  parent: Microsoft.Owin.Logging.LoggerExtensions
  langs:
  - csharp
  - vb
  name: WriteError(ILogger, String, Exception)
  nameWithType: LoggerExtensions.WriteError(ILogger, String, Exception)
  fullName: Microsoft.Owin.Logging.LoggerExtensions.WriteError(Microsoft.Owin.Logging.ILogger, System.String, System.Exception)
  type: Method
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Microsoft.Owin.Logging
  summary: "\nWrites an error log message.\n"
  syntax:
    content: public static void WriteError(this ILogger logger, string message, Exception error)
    parameters:
    - id: logger
      type: Microsoft.Owin.Logging.ILogger
    - id: message
      type: System.String
    - id: error
      type: System.Exception
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub WriteError(logger As ILogger, message As String, error As Exception)
  overload: Microsoft.Owin.Logging.LoggerExtensions.WriteError*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Owin.Logging.LoggerExtensions.WriteCritical(Microsoft.Owin.Logging.ILogger,System.String)
  commentId: M:Microsoft.Owin.Logging.LoggerExtensions.WriteCritical(Microsoft.Owin.Logging.ILogger,System.String)
  id: WriteCritical(Microsoft.Owin.Logging.ILogger,System.String)
  isExtensionMethod: true
  parent: Microsoft.Owin.Logging.LoggerExtensions
  langs:
  - csharp
  - vb
  name: WriteCritical(ILogger, String)
  nameWithType: LoggerExtensions.WriteCritical(ILogger, String)
  fullName: Microsoft.Owin.Logging.LoggerExtensions.WriteCritical(Microsoft.Owin.Logging.ILogger, System.String)
  type: Method
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Microsoft.Owin.Logging
  summary: "\nWrites a critical log message.\n"
  syntax:
    content: public static void WriteCritical(this ILogger logger, string message)
    parameters:
    - id: logger
      type: Microsoft.Owin.Logging.ILogger
    - id: message
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub WriteCritical(logger As ILogger, message As String)
  overload: Microsoft.Owin.Logging.LoggerExtensions.WriteCritical*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Owin.Logging.LoggerExtensions.WriteCritical(Microsoft.Owin.Logging.ILogger,System.String,System.Exception)
  commentId: M:Microsoft.Owin.Logging.LoggerExtensions.WriteCritical(Microsoft.Owin.Logging.ILogger,System.String,System.Exception)
  id: WriteCritical(Microsoft.Owin.Logging.ILogger,System.String,System.Exception)
  isExtensionMethod: true
  parent: Microsoft.Owin.Logging.LoggerExtensions
  langs:
  - csharp
  - vb
  name: WriteCritical(ILogger, String, Exception)
  nameWithType: LoggerExtensions.WriteCritical(ILogger, String, Exception)
  fullName: Microsoft.Owin.Logging.LoggerExtensions.WriteCritical(Microsoft.Owin.Logging.ILogger, System.String, System.Exception)
  type: Method
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Microsoft.Owin.Logging
  summary: "\nWrites a critical log message.\n"
  syntax:
    content: public static void WriteCritical(this ILogger logger, string message, Exception error)
    parameters:
    - id: logger
      type: Microsoft.Owin.Logging.ILogger
    - id: message
      type: System.String
    - id: error
      type: System.Exception
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub WriteCritical(logger As ILogger, message As String, error As Exception)
  overload: Microsoft.Owin.Logging.LoggerExtensions.WriteCritical*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Owin.Logging
  commentId: N:Microsoft.Owin.Logging
  isExternal: false
  name: Microsoft.Owin.Logging
  nameWithType: Microsoft.Owin.Logging
  fullName: Microsoft.Owin.Logging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Owin.Logging.LoggerExtensions.IsEnabled*
  commentId: Overload:Microsoft.Owin.Logging.LoggerExtensions.IsEnabled
  isExternal: true
  name: IsEnabled
  nameWithType: LoggerExtensions.IsEnabled
  fullName: Microsoft.Owin.Logging.LoggerExtensions.IsEnabled
- uid: Microsoft.Owin.Logging.ILogger
  commentId: T:Microsoft.Owin.Logging.ILogger
  parent: Microsoft.Owin.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Owin.Logging.ILogger
- uid: System.Diagnostics.TraceEventType
  isExternal: true
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Owin.Logging.LoggerExtensions.WriteVerbose*
  commentId: Overload:Microsoft.Owin.Logging.LoggerExtensions.WriteVerbose
  isExternal: true
  name: WriteVerbose
  nameWithType: LoggerExtensions.WriteVerbose
  fullName: Microsoft.Owin.Logging.LoggerExtensions.WriteVerbose
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Owin.Logging.LoggerExtensions.WriteInformation*
  commentId: Overload:Microsoft.Owin.Logging.LoggerExtensions.WriteInformation
  isExternal: true
  name: WriteInformation
  nameWithType: LoggerExtensions.WriteInformation
  fullName: Microsoft.Owin.Logging.LoggerExtensions.WriteInformation
- uid: Microsoft.Owin.Logging.LoggerExtensions.WriteWarning*
  commentId: Overload:Microsoft.Owin.Logging.LoggerExtensions.WriteWarning
  isExternal: true
  name: WriteWarning
  nameWithType: LoggerExtensions.WriteWarning
  fullName: Microsoft.Owin.Logging.LoggerExtensions.WriteWarning
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Microsoft.Owin.Logging.LoggerExtensions.WriteError*
  commentId: Overload:Microsoft.Owin.Logging.LoggerExtensions.WriteError
  isExternal: true
  name: WriteError
  nameWithType: LoggerExtensions.WriteError
  fullName: Microsoft.Owin.Logging.LoggerExtensions.WriteError
- uid: Microsoft.Owin.Logging.LoggerExtensions.WriteCritical*
  commentId: Overload:Microsoft.Owin.Logging.LoggerExtensions.WriteCritical
  isExternal: true
  name: WriteCritical
  nameWithType: LoggerExtensions.WriteCritical
  fullName: Microsoft.Owin.Logging.LoggerExtensions.WriteCritical
