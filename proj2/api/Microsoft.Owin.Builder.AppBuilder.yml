### YamlMime:ManagedReference
items:
- uid: Microsoft.Owin.Builder.AppBuilder
  commentId: T:Microsoft.Owin.Builder.AppBuilder
  id: AppBuilder
  parent: Microsoft.Owin.Builder
  children:
  - Microsoft.Owin.Builder.AppBuilder.#ctor
  - Microsoft.Owin.Builder.AppBuilder.Build(System.Type)
  - Microsoft.Owin.Builder.AppBuilder.New
  - Microsoft.Owin.Builder.AppBuilder.Properties
  - Microsoft.Owin.Builder.AppBuilder.Use(System.Object,System.Object[])
  langs:
  - csharp
  - vb
  name: AppBuilder
  nameWithType: AppBuilder
  fullName: Microsoft.Owin.Builder.AppBuilder
  type: Class
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Microsoft.Owin.Builder
  summary: "\nA standard implementation of IAppBuilder \n"
  syntax:
    content: 'public class AppBuilder : IAppBuilder'
    content.vb: >-
      Public Class AppBuilder
          Implements IAppBuilder
  inheritance:
  - System.Object
  implements:
  - Owin.IAppBuilder
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Owin.Builder.AppBuilder.#ctor
  commentId: M:Microsoft.Owin.Builder.AppBuilder.#ctor
  id: '#ctor'
  parent: Microsoft.Owin.Builder.AppBuilder
  langs:
  - csharp
  - vb
  name: AppBuilder()
  nameWithType: AppBuilder.AppBuilder()
  fullName: Microsoft.Owin.Builder.AppBuilder.AppBuilder()
  type: Constructor
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Microsoft.Owin.Builder
  summary: "\nInitializes a new instance of the the type.\n"
  syntax:
    content: public AppBuilder()
    content.vb: Public Sub New
  overload: Microsoft.Owin.Builder.AppBuilder.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Owin.Builder.AppBuilder.Use(System.Object,System.Object[])
  commentId: M:Microsoft.Owin.Builder.AppBuilder.Use(System.Object,System.Object[])
  id: Use(System.Object,System.Object[])
  parent: Microsoft.Owin.Builder.AppBuilder
  langs:
  - csharp
  - vb
  name: Use(Object, Object[])
  nameWithType: AppBuilder.Use(Object, Object[])
  fullName: Microsoft.Owin.Builder.AppBuilder.Use(System.Object, System.Object[])
  type: Method
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Microsoft.Owin.Builder
  summary: "\nAdds a middleware node to the OWIN function pipeline. The middleware are\ninvoked in the order they are added: the first middleware passed to Use will\nbe the outermost function, and the last middleware passed to Use will be the\ninnermost.\n"
  syntax:
    content: public IAppBuilder Use(object middleware, params object[] args)
    parameters:
    - id: middleware
      type: System.Object
      description: "\nThe middleware parameter determines which behavior is being chained into the\npipeline. \n\nIf the middleware given to Use is a Delegate, then it will be invoked with the &quot;next app&quot; in \nthe chain as the first parameter. If the delegate takes more than the single argument, \nthen the additional values must be provided to Use in the args array.\n\nIf the middleware given to Use is a Type, then the public constructor will be \ninvoked with the &quot;next app&quot; in the chain as the first parameter. The resulting object\nmust have a public Invoke method. If the object has constructors which take more than\nthe single &quot;next app&quot; argument, then additional values may be provided in the args array.\n"
    - id: args
      type: System.Object[]
      description: "\nAny additional args passed to Use will be passed as additional values, following the &quot;next app&quot;\nparameter, when the OWIN call pipeline is build.\n\nThey are passed as additional parameters if the middleware parameter is a Delegate, or as additional\nconstructor arguments if the middle parameter is a Type.\n"
    return:
      type: Owin.IAppBuilder
      description: "\nThe IAppBuilder itself is returned. This enables you to chain your use statements together.\n"
    content.vb: Public Function Use(middleware As Object, ParamArray args As Object()) As IAppBuilder
  overload: Microsoft.Owin.Builder.AppBuilder.Use*
  nameWithType.vb: AppBuilder.Use(Object, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Owin.Builder.AppBuilder.Use(System.Object, System.Object())
  name.vb: Use(Object, Object())
- uid: Microsoft.Owin.Builder.AppBuilder.New
  commentId: M:Microsoft.Owin.Builder.AppBuilder.New
  id: New
  parent: Microsoft.Owin.Builder.AppBuilder
  langs:
  - csharp
  - vb
  name: New()
  nameWithType: AppBuilder.New()
  fullName: Microsoft.Owin.Builder.AppBuilder.New()
  type: Method
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Microsoft.Owin.Builder
  summary: "\nThe New method creates a new instance of an IAppBuilder. This is needed to create\na tree structure in your processing, rather than a linear pipeline. The new instance share the\nsame Properties, but will be created with a new, empty middleware list.\n\nTo create a tangent pipeline you would first call New, followed by several calls to Use on \nthe new builder, ending with a call to Build on the new builder. The return value from Build\nwill be the entry-point to your tangent pipeline. This entry-point may now be added to the\nmain pipeline as an argument to a switching middleware, which will either call the tangent\npipeline or the &quot;next app&quot;, based on something in the request.\n\nThat said - all of that work is typically hidden by a middleware like Map, which will do that\nfor you.\n"
  syntax:
    content: public IAppBuilder New()
    return:
      type: Owin.IAppBuilder
      description: The new instance of the IAppBuilder implementation
    content.vb: Public Function New As IAppBuilder
  overload: Microsoft.Owin.Builder.AppBuilder.New*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Owin.Builder.AppBuilder.Build(System.Type)
  commentId: M:Microsoft.Owin.Builder.AppBuilder.Build(System.Type)
  id: Build(System.Type)
  parent: Microsoft.Owin.Builder.AppBuilder
  langs:
  - csharp
  - vb
  name: Build(Type)
  nameWithType: AppBuilder.Build(Type)
  fullName: Microsoft.Owin.Builder.AppBuilder.Build(System.Type)
  type: Method
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Microsoft.Owin.Builder
  summary: "\nThe Build is called at the point when all of the middleware should be chained\ntogether. This is typically done by the hosting component which created the app builder,\nand does not need to be called by the startup method if the IAppBuilder is passed in.\n"
  syntax:
    content: public object Build(Type returnType)
    parameters:
    - id: returnType
      type: System.Type
      description: "\nThe Type argument indicates which calling convention should be returned, and\nis typically typeof(<typeref name=\"Func&lt;IDictionary&lt;string,object>, Task>\"></typeref>) for the OWIN\ncalling convention.\n"
    return:
      type: System.Object
      description: "\nReturns an instance of the pipeline&apos;s entry point. This object may be safely cast to the\ntype which was provided\n"
    content.vb: Public Function Build(returnType As Type) As Object
  overload: Microsoft.Owin.Builder.AppBuilder.Build*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Owin.Builder.AppBuilder.Properties
  commentId: P:Microsoft.Owin.Builder.AppBuilder.Properties
  id: Properties
  parent: Microsoft.Owin.Builder.AppBuilder
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: AppBuilder.Properties
  fullName: Microsoft.Owin.Builder.AppBuilder.Properties
  type: Property
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Microsoft.Owin.Builder
  summary: "\nContains arbitrary properties which may added, examined, and modified by\ncomponents during the startup sequence. \n"
  syntax:
    content: public IDictionary<string, object> Properties { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: Returns <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Properties As IDictionary(Of String, Object)
  overload: Microsoft.Owin.Builder.AppBuilder.Properties*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Owin.Builder
  commentId: N:Microsoft.Owin.Builder
  isExternal: false
  name: Microsoft.Owin.Builder
  nameWithType: Microsoft.Owin.Builder
  fullName: Microsoft.Owin.Builder
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Owin.IAppBuilder
  isExternal: true
  name: IAppBuilder
  nameWithType: IAppBuilder
  fullName: Owin.IAppBuilder
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Owin.Builder.AppBuilder.#ctor*
  commentId: Overload:Microsoft.Owin.Builder.AppBuilder.#ctor
  isExternal: true
  name: AppBuilder
  nameWithType: AppBuilder.AppBuilder
  fullName: Microsoft.Owin.Builder.AppBuilder.AppBuilder
- uid: Microsoft.Owin.Builder.AppBuilder.Use*
  commentId: Overload:Microsoft.Owin.Builder.AppBuilder.Use
  isExternal: true
  name: Use
  nameWithType: AppBuilder.Use
  fullName: Microsoft.Owin.Builder.AppBuilder.Use
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Owin.Builder.AppBuilder.New*
  commentId: Overload:Microsoft.Owin.Builder.AppBuilder.New
  isExternal: true
  name: New
  nameWithType: AppBuilder.New
  fullName: Microsoft.Owin.Builder.AppBuilder.New
- uid: Microsoft.Owin.Builder.AppBuilder.Build*
  commentId: Overload:Microsoft.Owin.Builder.AppBuilder.Build
  isExternal: true
  name: Build
  nameWithType: AppBuilder.Build
  fullName: Microsoft.Owin.Builder.AppBuilder.Build
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.Owin.Builder.AppBuilder.Properties*
  commentId: Overload:Microsoft.Owin.Builder.AppBuilder.Properties
  isExternal: true
  name: Properties
  nameWithType: AppBuilder.Properties
  fullName: Microsoft.Owin.Builder.AppBuilder.Properties
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
