### YamlMime:ManagedReference
items:
- uid: Owin.MapWhenExtensions
  commentId: T:Owin.MapWhenExtensions
  id: MapWhenExtensions
  parent: Owin
  children:
  - Owin.MapWhenExtensions.MapWhen(Owin.IAppBuilder,System.Func{Microsoft.Owin.IOwinContext,System.Boolean},System.Action{Owin.IAppBuilder})
  - Owin.MapWhenExtensions.MapWhenAsync(Owin.IAppBuilder,System.Func{Microsoft.Owin.IOwinContext,System.Threading.Tasks.Task{System.Boolean}},System.Action{Owin.IAppBuilder})
  langs:
  - csharp
  - vb
  name: MapWhenExtensions
  nameWithType: MapWhenExtensions
  fullName: Owin.MapWhenExtensions
  type: Class
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Owin
  summary: "\nExtension methods for the MapWhenMiddleware\n"
  syntax:
    content: public static class MapWhenExtensions
    content.vb: Public Module MapWhenExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Owin.MapWhenExtensions.MapWhen(Owin.IAppBuilder,System.Func{Microsoft.Owin.IOwinContext,System.Boolean},System.Action{Owin.IAppBuilder})
  commentId: M:Owin.MapWhenExtensions.MapWhen(Owin.IAppBuilder,System.Func{Microsoft.Owin.IOwinContext,System.Boolean},System.Action{Owin.IAppBuilder})
  id: MapWhen(Owin.IAppBuilder,System.Func{Microsoft.Owin.IOwinContext,System.Boolean},System.Action{Owin.IAppBuilder})
  isExtensionMethod: true
  parent: Owin.MapWhenExtensions
  langs:
  - csharp
  - vb
  name: MapWhen(IAppBuilder, Func<IOwinContext, Boolean>, Action<IAppBuilder>)
  nameWithType: MapWhenExtensions.MapWhen(IAppBuilder, Func<IOwinContext, Boolean>, Action<IAppBuilder>)
  fullName: Owin.MapWhenExtensions.MapWhen(Owin.IAppBuilder, System.Func<Microsoft.Owin.IOwinContext, System.Boolean>, System.Action<Owin.IAppBuilder>)
  type: Method
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Owin
  summary: "\nBranches the request pipeline based on the result of the given predicate.\n"
  syntax:
    content: public static IAppBuilder MapWhen(this IAppBuilder app, Func<IOwinContext, bool> predicate, Action<IAppBuilder> configuration)
    parameters:
    - id: app
      type: Owin.IAppBuilder
    - id: predicate
      type: System.Func{Microsoft.Owin.IOwinContext,System.Boolean}
      description: Invoked with the request environment to determine if the branch should be taken
    - id: configuration
      type: System.Action{Owin.IAppBuilder}
      description: Configures a branch to take
    return:
      type: Owin.IAppBuilder
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MapWhen(app As IAppBuilder, predicate As Func(Of IOwinContext, Boolean), configuration As Action(Of IAppBuilder)) As IAppBuilder
  overload: Owin.MapWhenExtensions.MapWhen*
  nameWithType.vb: MapWhenExtensions.MapWhen(IAppBuilder, Func(Of IOwinContext, Boolean), Action(Of IAppBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Owin.MapWhenExtensions.MapWhen(Owin.IAppBuilder, System.Func(Of Microsoft.Owin.IOwinContext, System.Boolean), System.Action(Of Owin.IAppBuilder))
  name.vb: MapWhen(IAppBuilder, Func(Of IOwinContext, Boolean), Action(Of IAppBuilder))
- uid: Owin.MapWhenExtensions.MapWhenAsync(Owin.IAppBuilder,System.Func{Microsoft.Owin.IOwinContext,System.Threading.Tasks.Task{System.Boolean}},System.Action{Owin.IAppBuilder})
  commentId: M:Owin.MapWhenExtensions.MapWhenAsync(Owin.IAppBuilder,System.Func{Microsoft.Owin.IOwinContext,System.Threading.Tasks.Task{System.Boolean}},System.Action{Owin.IAppBuilder})
  id: MapWhenAsync(Owin.IAppBuilder,System.Func{Microsoft.Owin.IOwinContext,System.Threading.Tasks.Task{System.Boolean}},System.Action{Owin.IAppBuilder})
  isExtensionMethod: true
  parent: Owin.MapWhenExtensions
  langs:
  - csharp
  - vb
  name: MapWhenAsync(IAppBuilder, Func<IOwinContext, Task<Boolean>>, Action<IAppBuilder>)
  nameWithType: MapWhenExtensions.MapWhenAsync(IAppBuilder, Func<IOwinContext, Task<Boolean>>, Action<IAppBuilder>)
  fullName: Owin.MapWhenExtensions.MapWhenAsync(Owin.IAppBuilder, System.Func<Microsoft.Owin.IOwinContext, System.Threading.Tasks.Task<System.Boolean>>, System.Action<Owin.IAppBuilder>)
  type: Method
  source:
    path: Microsoft.Owin
    isExternal: true
  assemblies:
  - Microsoft.Owin
  namespace: Owin
  summary: "\nBranches the request pipeline based on the async result of the given predicate.\n"
  syntax:
    content: public static IAppBuilder MapWhenAsync(this IAppBuilder app, Func<IOwinContext, Task<bool>> predicate, Action<IAppBuilder> configuration)
    parameters:
    - id: app
      type: Owin.IAppBuilder
    - id: predicate
      type: System.Func{Microsoft.Owin.IOwinContext,System.Threading.Tasks.Task{System.Boolean}}
      description: Invoked asynchronously with the request environment to determine if the branch should be taken
    - id: configuration
      type: System.Action{Owin.IAppBuilder}
      description: Configures a branch to take
    return:
      type: Owin.IAppBuilder
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MapWhenAsync(app As IAppBuilder, predicate As Func(Of IOwinContext, Task(Of Boolean)), configuration As Action(Of IAppBuilder)) As IAppBuilder
  overload: Owin.MapWhenExtensions.MapWhenAsync*
  nameWithType.vb: MapWhenExtensions.MapWhenAsync(IAppBuilder, Func(Of IOwinContext, Task(Of Boolean)), Action(Of IAppBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Owin.MapWhenExtensions.MapWhenAsync(Owin.IAppBuilder, System.Func(Of Microsoft.Owin.IOwinContext, System.Threading.Tasks.Task(Of System.Boolean)), System.Action(Of Owin.IAppBuilder))
  name.vb: MapWhenAsync(IAppBuilder, Func(Of IOwinContext, Task(Of Boolean)), Action(Of IAppBuilder))
references:
- uid: Owin
  commentId: N:Owin
  isExternal: false
  name: Owin
  nameWithType: Owin
  fullName: Owin
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Owin.MapWhenExtensions.MapWhen*
  commentId: Overload:Owin.MapWhenExtensions.MapWhen
  isExternal: true
  name: MapWhen
  nameWithType: MapWhenExtensions.MapWhen
  fullName: Owin.MapWhenExtensions.MapWhen
- uid: Owin.IAppBuilder
  isExternal: true
  name: IAppBuilder
  nameWithType: IAppBuilder
  fullName: Owin.IAppBuilder
- uid: System.Func{Microsoft.Owin.IOwinContext,System.Boolean}
  commentId: T:System.Func{Microsoft.Owin.IOwinContext,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<IOwinContext, Boolean>
  nameWithType: Func<IOwinContext, Boolean>
  fullName: System.Func<Microsoft.Owin.IOwinContext, System.Boolean>
  nameWithType.vb: Func(Of IOwinContext, Boolean)
  fullName.vb: System.Func(Of Microsoft.Owin.IOwinContext, System.Boolean)
  name.vb: Func(Of IOwinContext, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Owin.IOwinContext
    name: IOwinContext
    nameWithType: IOwinContext
    fullName: Microsoft.Owin.IOwinContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Owin.IOwinContext
    name: IOwinContext
    nameWithType: IOwinContext
    fullName: Microsoft.Owin.IOwinContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{Owin.IAppBuilder}
  commentId: T:System.Action{Owin.IAppBuilder}
  parent: System
  definition: System.Action`1
  name: Action<IAppBuilder>
  nameWithType: Action<IAppBuilder>
  fullName: System.Action<Owin.IAppBuilder>
  nameWithType.vb: Action(Of IAppBuilder)
  fullName.vb: System.Action(Of Owin.IAppBuilder)
  name.vb: Action(Of IAppBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Owin.IAppBuilder
    name: IAppBuilder
    nameWithType: IAppBuilder
    fullName: Owin.IAppBuilder
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Owin.IAppBuilder
    name: IAppBuilder
    nameWithType: IAppBuilder
    fullName: Owin.IAppBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Owin.MapWhenExtensions.MapWhenAsync*
  commentId: Overload:Owin.MapWhenExtensions.MapWhenAsync
  isExternal: true
  name: MapWhenAsync
  nameWithType: MapWhenExtensions.MapWhenAsync
  fullName: Owin.MapWhenExtensions.MapWhenAsync
- uid: System.Func{Microsoft.Owin.IOwinContext,System.Threading.Tasks.Task{System.Boolean}}
  commentId: T:System.Func{Microsoft.Owin.IOwinContext,System.Threading.Tasks.Task{System.Boolean}}
  parent: System
  definition: System.Func`2
  name: Func<IOwinContext, Task<Boolean>>
  nameWithType: Func<IOwinContext, Task<Boolean>>
  fullName: System.Func<Microsoft.Owin.IOwinContext, System.Threading.Tasks.Task<System.Boolean>>
  nameWithType.vb: Func(Of IOwinContext, Task(Of Boolean))
  fullName.vb: System.Func(Of Microsoft.Owin.IOwinContext, System.Threading.Tasks.Task(Of System.Boolean))
  name.vb: Func(Of IOwinContext, Task(Of Boolean))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Owin.IOwinContext
    name: IOwinContext
    nameWithType: IOwinContext
    fullName: Microsoft.Owin.IOwinContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Owin.IOwinContext
    name: IOwinContext
    nameWithType: IOwinContext
    fullName: Microsoft.Owin.IOwinContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
